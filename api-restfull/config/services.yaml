# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # config pour remplacer les références circulaires par les ID de l'entité de référence automatiquement par défaut
    circular_reference_handler:
        public: false
        class: callback
        factory: [App\Serializer\CircularHandlerFactory, getId]
    serializer.normalizer.object:
        class: Symfony\Component\Serializer\Normalizer\ObjectNormalizer
        arguments: ["@serializer.mapping.class_metadata_factory", null, "@serializer.property_accessor"]
        public: false
        tags: [serializer.normalizer]
        calls:
            - method: setCircularReferenceLimit
              arguments: [1]
            - method: setCircularReferenceHandler
              arguments: ["@circular_reference_handler"]

    # Ajout des EventListener pour l'authentificatio par JWT
    acme_api.event.jwt_created_listener:
        class: App\EventListener\JWTCreatedListener
        arguments: [ '@request_stack' ]
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }

    # Ajout de l'EventListener dédié à la gestion des erreurs lors de l'utilisation de l'API
    app.listener.api_exception:
        class: App\EventListener\ApiExceptionListener
        tags:
            - { name: kernel.event_listener, event: kernel.exception, method: onKernelException }

    # Ajout du service de code générique partagé
    App\Service\Shared:
        arguments:
            - "@doctrine.orm.entity_manager"

    # Service de ParamConverter doctrine pour les données de requêtes de type QueryParameter et PayloadParameter
    App\ParamConverter\RequestParamConverter:
        tags:
            - { name: request.param_converter, converter: request_param_converter }
        arguments:
            - "@?doctrine"
            - "@?sensio_framework_extra.converter.doctrine.orm.expression_language"